name: Python CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: read

jobs:
  python-ci:
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
        poetry-version: ["1.6.1"]
        os: [ubuntu-latest, windows-latest]
    env:
      DEBUG: 1
      GRAPHRAG_LLM_TYPE: "azure_openai_chat"
      GRAPHRAG_EMBEDDING_TYPE: "azure_openai_embedding"
      GRAPHRAG_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GRAPHRAG_API_BASE: ${{ secrets.GRAPHRAG_API_BASE }}
      GRAPHRAG_API_VERSION: ${{ secrets.GRAPHRAG_API_VERSION }}
      GRAPHRAG_LLM_DEPLOYMENT_NAME: ${{ secrets.GRAPHRAG_LLM_DEPLOYMENT_NAME }}
      GRAPHRAG_EMBEDDING_DEPLOYMENT_NAME: ${{ secrets.GRAPHRAG_EMBEDDING_DEPLOYMENT_NAME }}
      GRAPHRAG_LLM_MODEL: gpt-3.5-turbo-16k
      GRAPHRAG_EMBEDDING_MODEL: text-embedding-ada-002
      # We have Windows + Linux runners in 3.10 and 3.11, so we need to divide the rate limits by 4
      GRAPHRAG_LLM_TPM: 45_000 # 180,000 / 4
      GRAPHRAG_LLM_RPM: 270 # 1,080 / 4
      GRAPHRAG_EMBEDDING_TPM: 87_500 # 350,000 / 4
      GRAPHRAG_EMBEDDING_RPM: 525 # 2,100 / 4

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            python:
              - 'graphrag/**/*'
              - 'poetry.lock'
              - 'pyproject.toml'
              - '**/*.py'
              - '**/*.toml'
              - '**/*.ipynb'
              - .github/workflows/python-ci.yml

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry ${{ matrix.poetry-version }}
        uses: abatilo/actions-poetry@v3.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install dependencies
        shell: bash
        run: poetry self add setuptools && poetry install

      - name: Check Semversioner
        run: |
          poetry run semversioner check

      - name: Check
        run: |
          poetry run poe check

      - name: Build
        run: |
          poetry build

      - name: Install Azurite
        id: azuright
        uses: potatoqualitee/azuright@v1.1

      - name: Unit Test
        run: |
          poetry run poe test_unit

      - name: Integration Test
        run: |
          poetry run poe test_integration

      - name: Smoke Test
        if: steps.changes.outputs.python == 'true'
        run: |
          poetry run poe test_smoke

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-artifacts-${{ matrix.python-version }}-${{ matrix.poetry-version }}-${{ runner.os }}
          path: tests/fixtures/*/output

      - name: E2E Test
        if: steps.changes.outputs.python == 'true'
        run: |
          ./scripts/e2e-test.sh
